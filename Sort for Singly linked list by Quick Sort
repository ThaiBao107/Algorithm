#include<iostream>
using namespace std;
// Sort icreaser for singly linked list by Quick Sort

struct NODE
{
	int data;
	NODE* link;
};

struct LIST
{
	NODE* pHead;
	NODE* pTail;
};

void init_LIST(LIST& l)
{
	l.pHead = NULL;
	l.pTail = NULL;
}

NODE* init_NODE(int x)
{
	NODE * p = new NODE;
	p->data = x;
	p->link = NULL;
	return p;	
}


void add_NODE(LIST& l, NODE* p)
{
	if (l.pHead == NULL)
		l.pHead = l.pTail = p;
	else
	{
		l.pTail->link = p;
		l.pTail = p;
	}
}

void show_table(LIST l)
{
	int i = 1;
	for (NODE* k = l.pHead; k != NULL; k = k->link)
		cout << "NODE " << i++ << ": " << k->data << endl;
}


void delete_NODE(LIST& l, int x)
{
	NODE* p = l.pHead;
	NODE* PreX = l.pHead;
	while (p != NULL)
	{
		if (p->data == x)
		{
			NODE* r = p;
			if (p == l.pHead)
			{
				l.pHead = l.pHead->link;
				p = l.pHead;
				PreX = l.pHead;
			}
			else
			{
				PreX->link = p->link;
				p = p->link;
			}
			delete r;
		}	
		else
		{
			PreX = p;
			p = p->link;
		}
	}
	
}

void swap(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}


NODE* partition(NODE* start, NODE* end)
{
	int pivot = end->data;
	NODE* i = start;
	for (NODE* j = start; j != end; j = j->link)   // nay de lam truc va truc do la phan tu cuoi trong danh sach
	{
		if (j->data <= pivot)
		{
			swap(j->data, i->data);
			i = i->link;
		}
	}
	swap(i->data, end->data);
	return i;
}

void Quick_Sort_Unit(NODE *& start, NODE *& end)
{
	if (start != NULL && end != NULL && start != end && start != end->link)
	{
		NODE* pivot = partition(start,end);
		Quick_Sort_Unit(start,pivot->link); //phan hoach vung de sap xep
		Quick_Sort_Unit(pivot->link, end);
	}
}

void Quick_Sort(LIST& l)
{
	Quick_Sort_Unit(l.pHead, l.pTail);
}
void destroy_list(LIST& l)
{
	while (l.pHead != NULL)
	{
		NODE* temp = l.pHead;
		l.pHead = l.pHead->link;
		delete temp;
	}
}

int main()
{
	LIST l;
	init_LIST(l);
	int choose;
	do
	{
		cout << "-----------------MENU--------------------" << endl;
		cout << "1. Enter list                             " << endl;
		cout << "2. Show table                              " << endl;
		cout << "3. Delete a NODE in list                    " << endl;
		cout << "4. Sort increase by Quick Sort              " << endl;
		cout << "5. EXIT                                     " << endl;
		cout << "------------------------------------------" << endl;
		cout << "Choose: ";
		while (true)
		{
			cin >> choose;
			if (choose > 0 && choose <= 5) break;
			else
				cout << "Nhap sai, nhap lai: ";
		}
		system("cls");
		switch (choose)
		{
		case 1:
		{
			int x;
			cout << "Enter value: ";
			cin >> x;
			NODE* p = init_NODE(x);
			add_NODE(l, p);
			break;
		}
		case 2:
		{
			if (l.pHead == NULL)
				cout << "No list" << endl;
			else
			{
				show_table(l);
			}
			break;
		}
		case 3:
		{
			if (l.pHead == NULL)
				cout << "No list" << endl;
			else
			{
				int x;
				cout << "Enter the value to delete: ";
				cin >> x;
				delete_NODE(l, x);
				cout << "Delete success" << endl;
			}
			break;
		}
		case 4:
		{
			if (l.pHead == NULL)
				cout << "No list" << endl;
			else
			{
				Quick_Sort(l);
				cout << "Sort successful" << endl;
				system("pause");
				system("cls");
				cout << "The list after when sorting" << endl;
				show_table(l);
			}
			break;
		}
		case 5:
		{
			if (l.pHead == NULL)
			{
				return 0;
			}
			else
			{
				destroy_list(l);
				return 0;
			}
		}
		}
		system("pause");
		system("cls");
	} while (true);
}
