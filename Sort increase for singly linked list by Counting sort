#include<iostream>
using namespace std;

struct NODE
{
	int data;
	NODE* link;
};

struct LIST
{
	NODE* pHead;
	NODE* pTail;
};

void init_LIST(LIST& l)
{
	l.pHead = NULL;
	l.pTail = NULL;
}


NODE* init_NODE(int x)
{
	NODE* p = new NODE;
	p->data = x;
	p->link = NULL;
	return p;
}


void add_NODE(LIST& l, NODE* p)
{
	if (l.pHead == NULL)
		l.pHead = l.pTail = p;
	else
	{
		l.pTail->link = p;
		l.pTail = p;
	}
}

void show_list(LIST l)
{
	int i = 0;
	cout << "LIST" << endl;
	for (NODE* k = l.pHead; k != NULL; k = k->link)
		cout << "NODE " << i++ << ": " << k->data << endl;
}


int get_Max(LIST l)
{
	int max = l.pHead->data;
	/*for (NODE* k = l.pHead; k != NULL; k = k->link)
		if (k != l.pTail)
			max = (max < l.pHead->link->data) ? max = l.pHead->link->data : max = max;
	return max;
}*/
	for (NODE* k = l.pHead; k != NULL; k = k->link)
	{
		if (max < k->data)
			max = k->data;
	}
	return max;
}
void Counting_sort(LIST l, LIST& result)
{
	// khoi tao danh sach dem
	int max = get_Max(l) + 1;
	int *temp = new int[max]();
	// khoi tao cac bien dem = 0
	// count 
	for (NODE* k = l.pHead; k != NULL; k = k->link)
	{
		temp[k->data]++;
	}
	// sort and save for array result
	for (int i = max - 1; i >= 0; i--)
	{
		while (temp[i] > 0)
		{
			NODE* p = init_NODE(i);
			add_NODE(result, p);
			temp[i]--;
		}
	}
	delete[] temp;
}

int main()
{
	LIST l;
	LIST result;
	init_LIST(l);
	init_LIST(result);
	int choose;
	do
	{
		cout << "-------------MENU------------------" << endl;
		cout << "1. Enter NODE for LIST              " << endl;
		cout << "2. Show list                        " << endl;
		cout << "3. Counting sort increase for list    " << endl;
		cout << "4. EXIT                               " << endl;
		cout << "Choose: ";
		while (true)
		{
			cin >> choose;
			if (choose > 0 && choose <= 4) break;
			else
				cout << "Nhap sai, nhap lai: ";
		}
		system("cls");
		switch (choose)
		{
		case 1:
		{
			int x;
			cout << "Enter value: ";
			cin >> x;
			NODE* p = init_NODE(x);
			add_NODE(l, p);
			break;
		}
		case 2:
		{
			if (l.pHead == NULL)
				cout << "No list" << endl;
			else
			{
				show_list(l);
			}
			break;
		}
		case 3:
		{
			if (l.pHead == NULL)
				cout << "No list" << endl;
			else
			{
				Counting_sort(l, result);
				cout << "Sort success" << endl;
				system("pause");
				system("cls");
				show_list(result);
			}
			break;
		}
		case 4:
		{
			if (l.pHead == NULL) return 0;
			else
			{
				while (l.pHead != NULL)
				{
					NODE* h = l.pHead;
					l.pHead = l.pHead->link;
					delete h;
				}

				while (result.pHead != NULL)
				{
					NODE* h = result.pHead;
					result.pHead = result.pHead->link;
					delete h;
				}
				return 0;
			}
		}
		}
		system("pause");
		system("cls");
	} while (true);

}
